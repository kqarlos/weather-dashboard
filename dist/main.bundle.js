/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/script.js":
/*!*****************************!*\
  !*** ./assets/js/script.js ***!
  \*****************************/
/***/ (() => {

eval("var locations = [];\nconst APIKey = \"e42ce6fff3cc019aac43965299686295\";\n\n//Get icon classes for font awesome\nfunction getIcon(condition) {\n    switch (condition) {\n        case \"Rain\":\n            return \"fas fa-cloud-showers-heavy\";\n        case \"Clouds\":\n            return \"fas fa-cloud\";\n        case \"Clear\":\n            return \"fas fa-sun\";\n        case \"Drizzle\":\n            return \"fas fa-cloud-rain\";\n        case \"Snow\":\n            return \"fas fa-snowflake\";\n        case \"Mist\":\n            return \"fas fa-smog\";\n        case \"Fog\":\n            return \"fas fa-smog\";\n        default:\n            return \"fas fa-cloud-sun\";\n    }\n}\n\n//Clear information and render according to data\nfunction renderCurrentWeather(location, temperature, humidity, windSpeed, uv, condition) {\n    $(\"#welcome\").css(\"display\", \"none\");\n    $(\"#currentWeather, #forecast\").css(\"display\", \"block\");\n    $(\"#location\").empty().append(`${location} `);\n    let date = moment().format(\"MM\" + \"/\" + \"DD\" + \"/\" + \"YYYY\");\n    $(\"#location\").append(`${date} `);\n\n    let icon = $(\"<span>\");\n    icon.addClass(getIcon(condition));\n    $(\"#location\").append(icon);\n\n    $(\"#temperature\").empty().append(`${temperature} °F`);\n\n    $(\"#humidity\").empty().append(`${humidity}%`);\n\n    $(\"#windSpeed\").empty().append(`${windSpeed} MPH`);\n\n    let uvWarnings = {\n        green: \"* You can safely stay outside using standard daily sun protection: broad spectrum SPF 30+ sunscreen containing zinc, sunglasses, and hat. Don't forget: in winter, reflection off snow can nearly double UV strength.\",\n        yellow: \"* Stay in the shade during late morning through mid-afternoon. Wear broad spectrum SPF 30+ sunscreen containing zinc, sunglasses, and hat.\",\n        orange: \"* Stay in the shade as much as possible, especially during late morning through mid-afternoon. Wear broad spectrum SPF 30+ sunscreen containing zinc, protective clothing (long-sleeved shirt and pants), sunglasses, and wide-brimmed hat.\",\n        red: \"* Extra protection needed. Be careful outside, especially during late morning through mid-afternoon. Stay in the shade as much as possible, especially during late morning through mid-afternoon. Wear broad spectrum SPF 30+ sunscreen containing zinc, protective clothing (long-sleeved shirt and pants), sunglasses, and wide-brimmed hat. Please note: white sand on the beach will reflect UV rays and can double UV exposure.\",\n        purple: \"* Extra protection needed. Avoid sun exposure during late morning through mid-afternoon. Unprotected skin and eyes can burn in minutes. Wear broad spectrum SPF 30+ sunscreen containing zinc, protective clothing (like long-sleeves), sunglasses, and wide-brimmed hat. Please note: white sand on the beach will reflect UV rays and can double UV exposure.\"\n    }\n\n    let warnings = [];\n    let uvWarning = $(\"<div>\");\n    if (uv < 3) {\n        $(\"#uv\").css(\"background-color\", \"green\");\n        uvWarning.append(uvWarnings.green);\n    }\n    else if (uv < 6) {\n        $(\"#uv\").css(\"background-color\", \"yellow\");\n        uvWarning.append(uvWarnings.yellow);\n    }\n    else if (uv < 8) {\n        $(\"#uv\").css(\"background-color\", \"orange\");\n        uvWarning.append(uvWarnings.orange);\n    }\n    else if (uv < 11) {\n        $(\"#uv\").css(\"background-color\", \"red\");\n        uvWarning.append(uvWarnings.red);\n    }\n    else {\n        $(\"#uv\").css(\"background-color\", \"purple\");\n        uvWarning.append(uvWarnings.purple);\n    }\n    $(\"#warnings\").empty().append(uvWarning);\n    $(\"#uv\").empty().append(uv);\n}\n\n//On click, handle logic to search for weather given a location\n$(\"#searchLocation\").on(\"click\", function (e) {\n    e.preventDefault();\n    let location = $(\"#locationInput\").val().trim();\n    $(\"#locationInput\").val(\"\");\n    query(location)\n});\n\n//Listen if one of the previouly searched cities' dynamically genereted button is clicked\n$(document).on(\"click\", \".city-button\", function () {\n    let location = $(this).attr(\"data-city\");\n    query(location);\n});\n\n//Formats UNIX timestamp into current date\nfunction formatDate(date) {\n    var date = new Date(date * 1000);\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getUTCFullYear()}`;\n}\n\n// Queries for the location weather and calls to render and update data\nfunction query(location) {\n    //query building\n    let queryURL = \"https://api.openweathermap.org/data/2.5/weather?q=\" + location + \"&units=imperial&appid=\" + APIKey;\n\n    fetch(queryURL).then(response => {\n        if (response.ok) {\n            return response.json();\n        } else {\n            // Catch empty string\n            alert(\"Error: \" + response.statusText);\n        }\n    }).then(response => {\n        console.log(\"1\", response);\n        let lat = response.coord.lat;\n        let lon = response.coord.lon;\n        //query building for uvi and forecats...\n        queryURL = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly&units=imperial&appid=${APIKey}`;\n        fetch(queryURL).then(data => {\n            return data.json()\n        }).then(data => {\n            console.log(\"2\", data);\n            //Call to generate a forecast card for the next five days\n            for (let i = 0; i < 5; i++) {\n                var date = data.daily[i].dt;\n                var temperature = data.daily[i].temp.day;\n                var humidity = data.daily[i].humidity;\n                var condition = data.daily[i].weather[0].main;\n                addCard(i, date, temperature, humidity, condition);\n            }\n            //Call to render current weather to main section\n            renderCurrentWeather(response.name, response.main.temp, response.main.humidity, response.wind.speed, data.current.uvi, response.weather[0].main);\n        });\n\n        // Check if location seaerched is new, if it is, add button, and update locations array and local storage\n        if (!locations.includes(response.name.toUpperCase())) {\n            addButton(response.name.toUpperCase());\n            locations.push(response.name.toUpperCase());\n            save();\n        }\n\n    }).catch((error) => {\n        //Catch invalid\n        alert(error);\n    });\n}\n\n// Renders a forecast card\nfunction addCard(index, date, temperature, humidity, condition) {\n\n    let card = $(\"<div>\");\n    card.addClass(\"card bgWhiteTransparent\");\n\n    let cardBody = $(\"<div>\");\n    cardBody.addClass(\"card-body\");\n\n    let title = $(\"<h3>\");\n    title.addClass(\"card-title font-weight-bold h4 text-center\");\n    date = formatDate(date);\n    title.text(`${date} `);\n\n    let icon = $(\"<span>\");\n    icon.addClass(getIcon(condition));\n    title.append(icon);\n\n    let t = $(\"<p>\");\n    t.addClass(\"card-text pt-2\");\n    t.text(\"Temp: \");\n    t.append(`${temperature} °F`);\n\n    let h = $(\"<p>\");\n    h.addClass(\"card-text pt-3\");\n    h.text(`Humidity: ${humidity}%`);\n\n    cardBody.append(title);\n    cardBody.append(t);\n    cardBody.append(h);\n\n    card.append(cardBody);\n\n    $(\"#\" + index).empty().append(card);\n}\n\n// Renders a button with the name of a location into the city history container\nfunction addButton(location) {\n    let button = $(\"<button>\");\n    button.addClass(\"list-group-item list-group-item-action city-button bgWhiteTransparent\");\n    button.attr(\"type\", \"button\");\n    button.attr(\"data-city\", location);\n    button.text(location)\n    $(\"#history\").prepend(button);\n}\n\n// Load locations from local sotrage and render city buttons if needed\nfunction setUp() {\n    locations = JSON.parse(localStorage.getItem(\"locations\")) || []\n    for (let i = 0; i < locations.length; i++) {\n        addButton(locations[i]);\n    }\n}\n\n// Save locations array to local storage\nfunction save() {\n    localStorage.setItem(\"locations\", JSON.stringify(locations));\n}\n\n// Clears locations array, calls to udate local storage and removes all city buttons\nfunction clear() {\n    locations = [];\n    save();\n    $(\".city-button\").remove();\n}\n\n$(\"#clear\").on(\"click\", clear);\n//set up when ready\n$(setUp()); \n\n\n//# sourceURL=webpack://weather-dashboard/./assets/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/js/script.js"]();
/******/ 	
/******/ })()
;